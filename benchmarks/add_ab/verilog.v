// Generated by CIRCT bcf3b7600
module add(	// benchmarks/add_ab/sv-seq-lowered.mlir:2:3
  input  [31:0] a,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:21
  input         a_valid,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:34
  input  [31:0] b,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:52
  input         b_valid,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:65
                clk,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:83
                rst,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:97
                out0_ready,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:111
  output        a_ready,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:133
                b_ready,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:151
  output [31:0] out0,	// benchmarks/add_ab/sv-seq-lowered.mlir:2:169
  output        out0_valid	// benchmarks/add_ab/sv-seq-lowered.mlir:2:185
);

  wire _GEN = a_valid & b_valid;	// benchmarks/add_ab/sv-seq-lowered.mlir:3:10
  wire _GEN_0 = out0_ready & _GEN;	// benchmarks/add_ab/sv-seq-lowered.mlir:3:10, :4:10
  assign a_ready = _GEN_0;	// benchmarks/add_ab/sv-seq-lowered.mlir:4:10, :6:5
  assign b_ready = _GEN_0;	// benchmarks/add_ab/sv-seq-lowered.mlir:4:10, :6:5
  assign out0 = a + b;	// benchmarks/add_ab/sv-seq-lowered.mlir:5:10, :6:5
  assign out0_valid = _GEN;	// benchmarks/add_ab/sv-seq-lowered.mlir:3:10, :6:5
endmodule

module {
  hw.module @add(in %a : i32, in %a_valid : i1, in %b : i32, in %b_valid : i1, in %clk : i1, in %rst : i1, in %out0_ready : i1, out a_ready : i1, out b_ready : i1, out out0 : i32, out out0_valid : i1) {
    %0 = comb.and %a_valid, %b_valid : i1
    %1 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    sv.assign %1, %0 : i1
    %2 = sv.read_inout %1 : !hw.inout<i1>
    %3 = comb.and %out0_ready, %2 : i1
    %4 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %4, %3 : i1
    %5 = comb.add %a, %b : i32
    %6 = sv.read_inout %1 : !hw.inout<i1>
    %7 = sv.read_inout %4 : !hw.inout<i1>
    %8 = sv.read_inout %4 : !hw.inout<i1>
    hw.output %8, %7, %5, %6 : i1, i1, i32, i1
  }
}

