// Generated by CIRCT bcf3b7600
module add(	// benchmarks/add/sv-seq-lowered.mlir:2:3
  input  [31:0] a,	// benchmarks/add/sv-seq-lowered.mlir:2:21
  input         a_valid,	// benchmarks/add/sv-seq-lowered.mlir:2:34
  input  [31:0] b,	// benchmarks/add/sv-seq-lowered.mlir:2:52
  input         b_valid,	// benchmarks/add/sv-seq-lowered.mlir:2:65
                clk,	// benchmarks/add/sv-seq-lowered.mlir:2:83
                rst,	// benchmarks/add/sv-seq-lowered.mlir:2:97
                out0_ready,	// benchmarks/add/sv-seq-lowered.mlir:2:111
  output        a_ready,	// benchmarks/add/sv-seq-lowered.mlir:2:133
                b_ready,	// benchmarks/add/sv-seq-lowered.mlir:2:151
  output [31:0] out0,	// benchmarks/add/sv-seq-lowered.mlir:2:169
  output        out0_valid	// benchmarks/add/sv-seq-lowered.mlir:2:185
);

  wire _GEN;	// benchmarks/add/sv-seq-lowered.mlir:49:11
  wire allDone;	// benchmarks/add/sv-seq-lowered.mlir:45:11
  wire done2;	// benchmarks/add/sv-seq-lowered.mlir:44:11
  wire done1;	// benchmarks/add/sv-seq-lowered.mlir:31:11
  wire done0;	// benchmarks/add/sv-seq-lowered.mlir:18:10
  reg  emitted_0;	// benchmarks/add/sv-seq-lowered.mlir:8:18
  always_ff @(posedge clk) begin	// benchmarks/add/sv-seq-lowered.mlir:10:5
    if (rst)	// benchmarks/add/sv-seq-lowered.mlir:10:5
      emitted_0 <= 1'h0;	// benchmarks/add/sv-seq-lowered.mlir:4:16, :13:7
    else	// benchmarks/add/sv-seq-lowered.mlir:10:5
      emitted_0 <= done0 & ~allDone;	// benchmarks/add/sv-seq-lowered.mlir:6:10, :7:10, :11:7, :18:10, :45:11
  end // always_ff @(posedge)
  wire _GEN_0 = ~emitted_0 & a_valid;	// benchmarks/add/sv-seq-lowered.mlir:9:10, :15:10, :16:10
  assign done0 = _GEN & _GEN_0 | emitted_0;	// benchmarks/add/sv-seq-lowered.mlir:9:10, :16:10, :17:10, :18:10, :49:11
  reg  emitted_1;	// benchmarks/add/sv-seq-lowered.mlir:21:18
  always_ff @(posedge clk) begin	// benchmarks/add/sv-seq-lowered.mlir:23:5
    if (rst)	// benchmarks/add/sv-seq-lowered.mlir:23:5
      emitted_1 <= 1'h0;	// benchmarks/add/sv-seq-lowered.mlir:4:16, :26:7
    else	// benchmarks/add/sv-seq-lowered.mlir:23:5
      emitted_1 <= done1 & ~allDone;	// benchmarks/add/sv-seq-lowered.mlir:19:10, :20:10, :24:7, :31:11, :45:11
  end // always_ff @(posedge)
  wire _GEN_1 = ~emitted_1 & a_valid;	// benchmarks/add/sv-seq-lowered.mlir:22:10, :28:11, :29:11
  assign done1 = _GEN & _GEN_1 | emitted_1;	// benchmarks/add/sv-seq-lowered.mlir:22:10, :29:11, :30:11, :31:11, :49:11
  reg  emitted_2;	// benchmarks/add/sv-seq-lowered.mlir:34:18
  always_ff @(posedge clk) begin	// benchmarks/add/sv-seq-lowered.mlir:36:5
    if (rst)	// benchmarks/add/sv-seq-lowered.mlir:36:5
      emitted_2 <= 1'h0;	// benchmarks/add/sv-seq-lowered.mlir:4:16, :39:7
    else	// benchmarks/add/sv-seq-lowered.mlir:36:5
      emitted_2 <= done2 & ~allDone;	// benchmarks/add/sv-seq-lowered.mlir:32:11, :33:11, :37:7, :44:11, :45:11
  end // always_ff @(posedge)
  wire _GEN_2 = ~emitted_2 & a_valid;	// benchmarks/add/sv-seq-lowered.mlir:35:11, :41:11, :42:11
  assign done2 = _GEN & _GEN_2 | emitted_2;	// benchmarks/add/sv-seq-lowered.mlir:35:11, :42:11, :43:11, :44:11, :49:11
  assign allDone = done0 & done1 & done2;	// benchmarks/add/sv-seq-lowered.mlir:18:10, :31:11, :44:11, :45:11
  wire _GEN_3 = _GEN_0 & b_valid & _GEN_2 & _GEN_1;	// benchmarks/add/sv-seq-lowered.mlir:16:10, :29:11, :42:11, :48:11
  assign _GEN = out0_ready & _GEN_3;	// benchmarks/add/sv-seq-lowered.mlir:48:11, :49:11
  assign a_ready = allDone;	// benchmarks/add/sv-seq-lowered.mlir:45:11, :51:5
  assign b_ready = _GEN;	// benchmarks/add/sv-seq-lowered.mlir:49:11, :51:5
  assign out0 = {a[30:0], 1'h0} + a;	// benchmarks/add/sv-seq-lowered.mlir:3:14, :46:11, :47:11, :50:11, :51:5
  assign out0_valid = _GEN_3;	// benchmarks/add/sv-seq-lowered.mlir:48:11, :51:5
endmodule

module {
  hw.module @add(in %a : i32, in %a_valid : i1, in %b : i32, in %b_valid : i1, in %clk : i1, in %rst : i1, in %out0_ready : i1, out a_ready : i1, out b_ready : i1, out out0 : i32, out out0_valid : i1) {
    %0 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i1>
    %allDone = sv.wire {hw.verilogName = "allDone"} : !hw.inout<i1>
    %done2 = sv.wire {hw.verilogName = "done2"} : !hw.inout<i1>
    %done1 = sv.wire {hw.verilogName = "done1"} : !hw.inout<i1>
    %done0 = sv.wire {hw.verilogName = "done0"} : !hw.inout<i1>
    %false = hw.constant false
    %false_0 = hw.constant false
    %true = hw.constant true
    %1 = sv.read_inout %allDone : !hw.inout<i1>
    %2 = comb.xor %1, %true : i1
    %3 = sv.read_inout %done0 : !hw.inout<i1>
    %4 = comb.and %3, %2 : i1
    %emitted_0 = sv.reg sym @emitted_0 {hw.verilogName = "emitted_0"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clk) {
      sv.passign %emitted_0, %4 : i1
    }(syncreset : posedge %rst) {
      sv.passign %emitted_0, %false_0 : i1
    }
    %5 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %6 = comb.xor %5, %true : i1
    %7 = comb.and %6, %a_valid : i1
    %8 = sv.wire {hw.verilogName = "_GEN_0"} : !hw.inout<i1>
    sv.assign %8, %7 : i1
    %9 = sv.read_inout %8 : !hw.inout<i1>
    %10 = sv.read_inout %0 : !hw.inout<i1>
    %11 = comb.and %10, %9 : i1
    %12 = sv.read_inout %emitted_0 : !hw.inout<i1>
    %13 = comb.or %11, %12 : i1
    sv.assign %done0, %13 : i1
    %14 = sv.read_inout %allDone : !hw.inout<i1>
    %15 = comb.xor %14, %true : i1
    %16 = sv.read_inout %done1 : !hw.inout<i1>
    %17 = comb.and %16, %15 : i1
    %emitted_1 = sv.reg sym @emitted_1 {hw.verilogName = "emitted_1"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clk) {
      sv.passign %emitted_1, %17 : i1
    }(syncreset : posedge %rst) {
      sv.passign %emitted_1, %false_0 : i1
    }
    %18 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %19 = comb.xor %18, %true : i1
    %20 = comb.and %19, %a_valid : i1
    %21 = sv.wire {hw.verilogName = "_GEN_1"} : !hw.inout<i1>
    sv.assign %21, %20 : i1
    %22 = sv.read_inout %21 : !hw.inout<i1>
    %23 = sv.read_inout %0 : !hw.inout<i1>
    %24 = comb.and %23, %22 : i1
    %25 = sv.read_inout %emitted_1 : !hw.inout<i1>
    %26 = comb.or %24, %25 : i1
    sv.assign %done1, %26 : i1
    %27 = sv.read_inout %allDone : !hw.inout<i1>
    %28 = comb.xor %27, %true : i1
    %29 = sv.read_inout %done2 : !hw.inout<i1>
    %30 = comb.and %29, %28 : i1
    %emitted_2 = sv.reg sym @emitted_2 {hw.verilogName = "emitted_2"} : !hw.inout<i1> 
    sv.alwaysff(posedge %clk) {
      sv.passign %emitted_2, %30 : i1
    }(syncreset : posedge %rst) {
      sv.passign %emitted_2, %false_0 : i1
    }
    %31 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %32 = comb.xor %31, %true : i1
    %33 = comb.and %32, %a_valid : i1
    %34 = sv.wire {hw.verilogName = "_GEN_2"} : !hw.inout<i1>
    sv.assign %34, %33 : i1
    %35 = sv.read_inout %34 : !hw.inout<i1>
    %36 = sv.read_inout %0 : !hw.inout<i1>
    %37 = comb.and %36, %35 : i1
    %38 = sv.read_inout %emitted_2 : !hw.inout<i1>
    %39 = comb.or %37, %38 : i1
    sv.assign %done2, %39 : i1
    %40 = sv.read_inout %done0 : !hw.inout<i1>
    %41 = sv.read_inout %done1 : !hw.inout<i1>
    %42 = sv.read_inout %done2 : !hw.inout<i1>
    %43 = comb.and %41, %42 : i1
    %44 = comb.and %40, %43 : i1
    sv.assign %allDone, %44 : i1
    %45 = comb.extract %a from 0 : (i32) -> i31
    %46 = comb.concat %45, %false : i31, i1
    %47 = sv.read_inout %8 : !hw.inout<i1>
    %48 = sv.read_inout %21 : !hw.inout<i1>
    %49 = sv.read_inout %34 : !hw.inout<i1>
    %50 = comb.and %47, %b_valid : i1
    %51 = comb.and %49, %48 : i1
    %52 = comb.and %50, %51 : i1
    %53 = sv.wire {hw.verilogName = "_GEN_3"} : !hw.inout<i1>
    sv.assign %53, %52 : i1
    %54 = sv.read_inout %53 : !hw.inout<i1>
    %55 = comb.and %out0_ready, %54 : i1
    sv.assign %0, %55 : i1
    %56 = comb.add %46, %a : i32
    %57 = sv.read_inout %allDone : !hw.inout<i1>
    %58 = sv.read_inout %53 : !hw.inout<i1>
    %59 = sv.read_inout %0 : !hw.inout<i1>
    hw.output %57, %59, %56, %58 : i1, i1, i32, i1
  }
}

